(()=>{"use strict";var t={d:(s,o)=>{for(var e in o)t.o(o,e)&&!t.o(s,e)&&Object.defineProperty(s,e,{enumerable:!0,get:o[e]})},o:(t,s)=>Object.prototype.hasOwnProperty.call(t,s),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},s={};t.r(s),t.d(s,{annotations:()=>f,layers:()=>u});const o=p5,e=t=>{const{width:s,majorTicks:o,minorTicks:e}=t,i=o*(e+1);return{numXTicks:i,dx:s/(i+2)}},i=t=>{const{height:s,majorTicks:o,minorTicks:e}=t,i=o*(e+1);return{numYTicks:i,dy:s/(i+2)}},r=t=>{const{pg:s,x:o,y:r,size:a,color:n,ox:h,oy:l,width:p,height:c,majorTicks:y,minorTicks:d,xRange:m,yRange:g}=t;if(!(o instanceof Array&&r instanceof Array&&o.length===r.length))throw new Error("x and y dimensions must match");{s.push(),s.translate(h,l);const t=o.length,{dx:x}=e({width:p,majorTicks:y,minorTicks:d}),{dy:f}=i({height:c,majorTicks:y,minorTicks:d});s.translate(x,-f),s.noStroke(),s.fill(n);for(let e=0;e<t;e+=1){const t=s.map(o[e],m.min,m.max,0,p-2*x),i=-s.map(r[e],g.min,g.max,0,c-2*f);s.circle(t,i,a)}s.pop()}},{CENTER:a}=o.prototype,n=t=>{const{pg:s,x:o,y:r,size:n,color:h,ox:l,oy:p,width:c,height:y,majorTicks:d,minorTicks:m,xRange:g,yRange:x}=t;if(!(o instanceof Array&&r instanceof Array&&o.length===r.length))throw new Error("x and y dimensions must match");{s.push(),s.translate(l,p);const t=o.length,{dx:f}=e({width:c,majorTicks:d,minorTicks:m}),{dy:u}=i({height:y,majorTicks:d,minorTicks:m});s.translate(f,-u),s.rectMode(a),s.fill(h),s.stroke(h);for(let e=0;e<t;e+=1){const t=s.map(o[e],g.min,g.max,0,c-2*f),i=-s.map(r[e],x.min,x.max,0,y-2*u);s.square(t,i,n)}s.pop()}},h=t=>{const{pg:s,x:o,y:r,color:a,ox:n,oy:h,width:l,height:p,majorTicks:c,minorTicks:y,xRange:d,yRange:m}=t;if(!(o instanceof Array&&r instanceof Array&&o.length===r.length))throw new Error("x and y dimensions must match");{s.push(),s.translate(n,h);const t=o.length,{dx:g}=e({width:l,majorTicks:c,minorTicks:y}),{dy:x}=i({height:p,majorTicks:c,minorTicks:y});s.translate(g,-x),s.stroke(a);for(let e=0;e<t-1;e+=1){const t=s.map(o[e],d.min,d.max,0,l-2*g),i=-s.map(r[e],m.min,m.max,0,p-2*x),a=s.map(o[e+1],d.min,d.max,0,l-2*g),n=-s.map(r[e+1],m.min,m.max,0,p-2*x);s.line(t,i,a,n)}s.pop()}},l=t=>{(t=>{const{pg:s,x:o,y:i,width:r,height:a,majorTicks:n,minorTicks:h,gridColor:l}=t;s.push(),s.stroke(l),s.strokeWeight(1),s.translate(o,i);const{numXTicks:p,dx:c}=e({width:r,majorTicks:n,minorTicks:h});for(let t=0;t<=p;t+=1){const o=c*(t+1);t%(h+1)==0&&s.line(o,-1,o,-a)}s.pop()})(t),(t=>{const{pg:s,x:o,y:e,width:r,height:a,majorTicks:n,minorTicks:h,gridColor:l}=t;s.push(),s.stroke(l),s.strokeWeight(1),s.translate(o,e);const{numYTicks:p,dy:c}=i({height:a,majorTicks:n,minorTicks:h});for(let t=0;t<=p;t+=1){const o=-c*(t+1);t%(h+1)==0&&s.line(1,o,r,o)}s.pop()})(t)},p=t=>{(t=>{const{pg:s,x:o,y:i,width:r,majorTicks:a,minorTicks:n,tickSize:h,axesColor:l}=t;s.push(),s.stroke(l),s.strokeWeight(1),s.translate(o,i),s.line(0,0,r,0);const{numXTicks:p,dx:c}=e({width:r,majorTicks:a,minorTicks:n});for(let t=0;t<=p;t+=1){const o=c*(t+1);let e;e=t%(n+1)==0?2*h:h,s.line(o,0,o,e)}s.pop()})(t),(t=>{const{pg:s,x:o,y:e,height:r,majorTicks:a,minorTicks:n,tickSize:h,axesColor:l}=t;s.push(),s.stroke(l),s.strokeWeight(1),s.translate(o,e),s.line(0,0,0,-r);const{numYTicks:p,dy:c}=i({height:r,majorTicks:a,minorTicks:n});for(let t=0;t<=p;t+=1){const o=-c*(t+1);let e;e=t%(n+1)==0?2*h:h,s.line(-e,o,0,o)}s.pop()})(t)},{CENTER:c,ITALIC:y,PI:d}=o.prototype,m=t=>{const{pg:s,padding:o,name:e,color:i}=t;s.push(),s.fill(i),s.noStroke(),s.translate(o,o-s.textSize()),s.text(e,0,0),s.pop()},g=t=>{const{pg:s,ox:o,oy:e,width:i,name:r,color:a}=t;s.push(),s.fill(a),s.noStroke(),s.translate(o+i/2,e+2.5*s.textSize()),s.textAlign(c,c),s.textStyle(y),s.text(r,0,0),s.pop()},x=t=>{const{pg:s,ox:o,oy:e,height:i,name:r,color:a}=t;s.push(),s.fill(a),s.noStroke(),s.translate(o-2.5*s.textSize(),e-i/2),s.rotate(1.5*d),s.textAlign(c,c),s.textStyle(y),s.text(r,0,0),s.pop()},f={default:{fontColor:"white",axesColor:"white",gridColor:"darkgray",backgroundColor:"#222"}},u={deep:["#4C72B0","#DD8452","#55A868","#C44E52","#8172B3","#937860","#DA8BC3","#8C8C8C","#CCB974","#64B5CD"],muted:["#4878D0","#EE854A","#6ACC64","#D65F5F","#956CB4","#8C613C","#DC7EC0","#797979","#D5BB67","#82C6E2"],pastel:["#A1C9F4","#FFB482","#8DE5A1","#FF9F9B","#D0BBFF","#DEBB9B","#FAB0E4","#CFCFCF","#FFFEA3","#B9F2F0"],bright:["#023EFF","#FF7C00","#1AC938","#E8000B","#8B2BE2","#9F4800","#F14CC1","#A3A3A3","#FFC400","#00D7FF"],dark:["#001C7F","#B1400D","#12711C","#8C0800","#591E71","#592F0D","#A23582","#3C3C3C","#B8850A","#006374"],colorblind:["#0173B2","#DE8F05","#029E73","#D55E00","#CC78BC","#CA9161","#FBAFE4","#949494","#ECE133","#56B4E9"]},k=t=>Math.min(...t),T=t=>Math.max(...t),w=t=>({min:k(t),max:T(t)});class C{constructor(t,s,o){this.raw={x:t,y:s,data:o},this.sorted={},this._sort()}_sort(){let t,s;this.raw.data instanceof o.Table?(t=this.raw.data.getColumn(this.raw.x),s=this.raw.data.getColumn(this.raw.y)):this.raw.data instanceof Object?(t=this.raw.data[this.raw.x],s=this.raw.data[this.raw.y]):(t=this.raw.x,s=this.raw.y);const e=(t=>{const s=t.map(((t,s)=>({i:s,value:t})));return s.sort(((t,s)=>t.value>s.value?1:t.value<s.value?-1:0)),s.map((t=>t.i))})(t);this.sorted.x=e.map((s=>t[s])),this.sorted.y=e.map((t=>s[t])),this.sorted.xRange=w(this.sorted.x),this.sorted.yRange=w(this.sorted.y)}equals(t,s){return t===this.raw.x&&s===this.raw.y}}o.Table.prototype.asNum=function(t){this.rows.forEach((s=>{const o=s.getNum(t);s.setNum(t,o)}))},o.Table.prototype.asString=function(t){this.rows.forEach((s=>{const o=s.getString(t);s.setString(t,o)}))},o.Table.prototype.inferType=function(){this.columns.forEach((t=>{try{this.asNum(t)}catch(t){}}))},o.prototype._plotData={plots:[]};class b{constructor(t,s){this.data={raw:s,sorted:[]},this.label={x:"",y:""},this.x=0,this.y=0,this.width=t.width,this.height=t.height,this.renderers={annotations:t.createGraphics(this.width,this.height),layers:t.createGraphics(this.width,this.height)},t._plotData.plots.push(this),this.layerPalette=u.colorblind,this.numLayers=0;const o={top:50,right:50,bottom:50,left:50};this.styleProps={pg:this.renderers.layers,padding:o,x:this.x+o.left,y:this.y+this.height-o.top,width:this.width-o.left-o.right,height:this.height-o.top-o.bottom,majorTicks:5,minorTicks:4,tickSize:4,fontColor:f.default.fontColor,axesColor:f.default.axesColor,gridColor:f.default.gridColor,backgroundColor:f.default.backgroundColor},this.annotationOps=[],this.layerOps=[]}_wrangle(){this.data.raw instanceof o.Table&&this.data.raw.inferType()}_preprocess(t,s){let o=!1;if(this.data.sorted.forEach((e=>{e.equals(t,s)&&(o=e.sorted)})),!o){const e=new C(t,s,this.data.raw);this.data.sorted.push(e),o=e.sorted}return[o.x,o.y,o.xRange,o.yRange]}position(t,s){this.x=t,this.y=s}theme(t){"string"==typeof t&&(this.layerPalette=s[t])}_annotations(){this.xlabel(),this.ylabel(),this.gridLines(),this.axes(),this.background()}background(t){t&&(this.styleProps.backgroundColor=t);const s={f:this.renderers.annotations.background,props:this.styleProps.backgroundColor};this.annotationOps.unshift(s)}gridLines(t){t&&(this.styleProps.gridColor=t);const s={pg:this.renderers.annotations,x:this.styleProps.x,y:this.styleProps.y,width:this.styleProps.width,height:this.styleProps.height,majorTicks:this.styleProps.majorTicks,minorTicks:this.styleProps.minorTicks,gridColor:this.styleProps.gridColor},o={f:l,props:s};this.annotationOps.unshift(o)}axes(){const t={f:p,props:this.styleProps};this.annotationOps.unshift(t)}title(t){const s={pg:this.renderers.annotations,padding:this.styleProps.padding.top,name:t,color:this.styleProps.fontColor},o={f:m,props:s};this.annotationOps.push(o)}xlabel(t){this.label.x=t||this.label.x;const s={pg:this.renderers.annotations,ox:this.styleProps.x,oy:this.styleProps.y,width:this.styleProps.width,name:this.label.x,color:this.styleProps.fontColor},o={f:g,props:s};this.annotationOps.push(o)}ylabel(t){this.label.y=t||this.label.y;const s={pg:this.renderers.annotations,ox:this.styleProps.x,oy:this.styleProps.y,height:this.styleProps.height,name:this.label.y,color:this.styleProps.fontColor},o={f:x,props:s};this.annotationOps.push(o)}fill(t){const s={f:this.renderers.layers.fill,props:t};this.layerOps.push(s)}stroke(t){const s={f:this.renderers.layers.stroke,props:t};this.layerOps.push(s)}strokeWeight(t){const s={f:this.renderers.layers.strokeWeight,props:t};this.layerOps.push(s)}point(...t){let s,e,i,a,n;t[0]instanceof Array&&t[1]instanceof Array&&t[0].length===t[1].length?([s,e,i,a]=this._preprocess(t[0],t[1]),n=t[2]||10):(this.data.raw instanceof o.Table&&"object"==typeof t[0]||this.data.raw instanceof Object&&"object"==typeof t[0])&&([s,e,i,a]=this._preprocess(t[0].x,t[0].y),this.label.x=t[0].x,this.label.y=t[0].y,n=t[0].size||10);const h={pg:this.renderers.layers,x:s,y:e,xRange:i,yRange:a,size:n,color:this.layerPalette[this.numLayers],ox:this.styleProps.x,oy:this.styleProps.y,width:this.styleProps.width,height:this.styleProps.height,majorTicks:this.styleProps.majorTicks,minorTicks:this.styleProps.minorTicks},l={f:r,props:h};this.layerOps.push(l),this.numLayers+=1}square(...t){let s,e,i,r,a;t[0]instanceof Array&&t[1]instanceof Array&&t[0].length===t[1].length?([s,e,i,r]=this._preprocess(t[0],t[1]),a=t[2]||10):(this.data.raw instanceof o.Table&&"object"==typeof t[0]||this.data.raw instanceof Object&&"object"==typeof t[0])&&([s,e,i,r]=this._preprocess(t[0].x,t[0].y),this.label.x=t[0].x,this.label.y=t[0].y,a=t[0].size||10);const h={pg:this.renderers.layers,x:s,y:e,xRange:i,yRange:r,size:a,color:this.layerPalette[this.numLayers],ox:this.styleProps.x,oy:this.styleProps.y,width:this.styleProps.width,height:this.styleProps.height,majorTicks:this.styleProps.majorTicks,minorTicks:this.styleProps.minorTicks},l={f:n,props:h};this.layerOps.push(l),this.numLayers+=1}line(...t){let s,e,i,r;t[0]instanceof Array&&t[1]instanceof Array&&t[0].length===t[1].length?[s,e,i,r]=this._preprocess(t[0],t[1]):(this.data.raw instanceof o.Table&&"object"==typeof t[0]||this.data.raw instanceof Object&&"object"==typeof t[0])&&([s,e,i,r]=this._preprocess(t[0].x,t[0].y),this.label.x=t[0].x,this.label.y=t[0].y);const a={pg:this.renderers.layers,x:s,y:e,color:this.layerPalette[this.numLayers],ox:this.styleProps.x,oy:this.styleProps.y,width:this.styleProps.width,height:this.styleProps.height,majorTicks:this.styleProps.majorTicks,minorTicks:this.styleProps.minorTicks,xRange:i,yRange:r},n={f:h,props:a};this.layerOps.push(n),this.numLayers+=1}}o.prototype.createPlot=function(t){return new b(this,t)},o.prototype._drawPlots=function(){this._plotData.plots.forEach((t=>{t._annotations(),t.annotationOps.forEach((t=>t.f(t.props))),t.layerOps.forEach((t=>t.f(t.props))),this.image(t.renderers.annotations,t.x,t.y,t.width,t.height),this.image(t.renderers.layers,t.x,t.y,t.width,t.height),t.annotationOps=[],t.layerOps=[],t.numLayers=0}))},o.prototype.registerMethod("post",o.prototype._drawPlots),o.prototype._removeFigures=function(){this._plotData.plots.forEach((t=>t.pg.remove())),this._plotData.plots=[]},o.prototype.registerMethod("remove",o.prototype._removeFigures)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,